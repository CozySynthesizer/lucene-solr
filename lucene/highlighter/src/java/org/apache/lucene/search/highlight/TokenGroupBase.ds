{{
package org.apache.lucene.search.highlight;
}}

TokenGroupBase:
    type Token = {
        score : Float,
        startOffset : Int,
        endOffset : Int,
        important : Bool
    }

    extern floatZero() : Float = "0.0f"

    state tokens : Set<(Int, Token)>

    invariant unique [s.0 | s <- tokens];

    private query importantTokens()
        [ t | t <- tokens, t.1.important]

    // __ prefix ==> something for use by the glue subclass.

    op __addToken(score : Float, startOffset : Int, endOffset : Int)
        assume not (len importantTokens() in [s.0 | s <- tokens]);

        tokens.add((len importantTokens(), {
            score: score,
            startOffset: startOffset,
            endOffset: endOffset,
            important: (empty tokens or score > floatZero()) and len importantTokens() < 50
            }));

    query __isDistinct(startOffset : Int)
        startOffset >= max [tok.1.endOffset | tok <- importantTokens()]

    query getScore(i : Int)
        assume i >= 0 and i < len importantTokens();
        (the [s.1 | s <- importantTokens(), s.0 == i]).score

    query getTotalScore()
        sum [tok.1.score | tok <- importantTokens()]

    query getStartOffset()
        min [tok.1.startOffset | tok <- importantTokens(), tok.1.score > floatZero()]

    query getEndOffset()
        max [tok.1.endOffset | tok <- importantTokens(), tok.1.score > floatZero()]

    query getNumTokens()
        len importantTokens()
