{{
package org.apache.lucene.search.highlight;

import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
}}

TokenGroupBase:
    type Float = Native "Float"
    type OffsetAttribute = Native "OffsetAttribute"

    type Token = {
        score : Float,
        startOffset : Int,
        endOffset : Int
    }

    extern floatGtZero(val : Float) : Bool = "{val} > 0.0f"
    extern floatZero() : Float = "0.0f"
    extern floatAdd(val1 : Float, val2 : Float) : Float = "{val1} + {val2}"

    state tokens : Set<(Int, Token)>
    state total : Float

    invariant unique [s.0 | s <- tokens];
    invariant unique [s | s <- tokens];
    invariant sum[1 | t <- tokens] < 50;

    // __ prefix <==> something for use by the glue subclass.

    op __clearTotal()
        total = floatZero();

    op __addToken(score : Float, startOffset : Int, endOffset : Int)
        assume not ((sum[1 | t <- tokens]) in [s.0 | s <- tokens]);

        if (sum[1 | t <- tokens] < 50) {
            if (empty tokens or floatGtZero(score)) {
                total = floatAdd(total, score);
            }

            tokens.add((sum[1 | t <- tokens],
                { score: score, startOffset: startOffset, endOffset: endOffset }));
        }

    query __getScore(i : Int)
        assume i >= 0 and i < sum[1 | t <- tokens];
        (the [s.1 | s <- tokens, s.0 == i]).score

    query __getTotalScore()
        total

    query getStartOffset()
        min [tok.1.startOffset | tok <- tokens, floatGtZero(tok.1.score)]

    query getEndOffset()
        max [tok.1.endOffset | tok <- tokens, floatGtZero(tok.1.score)]

    query __isDistinct(startOffset : Int)
        startOffset >= max [tok.1.endOffset | tok <- tokens]

    query getNumTokens()
        sum[1 | t <- tokens]
